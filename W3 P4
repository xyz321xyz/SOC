#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <climits>
 
using namespace std;
 

int count_avengers(long long start, long long end, const vector<long long>& avengers_positions) {
    return upper_bound(avengers_positions.begin(), avengers_positions.end(), end) - 
           lower_bound(avengers_positions.begin(), avengers_positions.end(), start);
}
 

long long min_pow(long long start, long long end, const vector<long long>& avengers_positions, int A, int B) {
    int no_of_avengers = count_avengers(start, end, avengers_positions);
    
    if (no_of_avengers == 0) {
        return A;
    }
    
    long long len = end - start + 1;
    if (len == 1) {
        return static_cast<long long>(B) * no_of_avengers;
    }
    
    long long mid = start + (end - start) / 2;
    long long powB = static_cast<long long>(B) * no_of_avengers * len;
    long long powDivide = min_pow(start, mid, avengers_positions, A, B) + min_pow(mid + 1, end, avengers_positions, A, B);
    
    return min(powB, powDivide);
}
 
int main() {
    int n, k, A, B;
    cin >> n >> k >> A >> B;
    
    vector<long long> avengers_positions(k);
    for (int i = 0; i < k; ++i) {
        cin >> avengers_positions[i];
    }
    
    
    sort(avengers_positions.begin(), avengers_positions.end());
    
    long long start = 1;
    long long end = 1LL << n;
    
    long long result = min_pow(start, end, avengers_positions, A, B);
    
    cout << result << endl;
    return 0;
}
