#include <iostream>
#include <vector>
using namespace std;

struct Node {
    long long zeros, ones, inv;
    Node(long long z = 0, long long o = 0, long long i = 0) : zeros(z), ones(o), inv(i) {}
};

class SegmentTree {
public:
    SegmentTree(int n) : n(n) {
        tree.resize(4 * n);
        lazy.resize(4 * n, false);
    }

    void build(const vector<int>& arr, int v, int tl, int tr) {
        if (tl == tr) {
            if (arr[tl] == 0) tree[v] = {1, 0, 0};
            else tree[v] = {0, 1, 0};
        } else {
            int tm = (tl + tr) / 2;
            build(arr, v * 2, tl, tm);
            build(arr, v * 2 + 1, tm + 1, tr);
            tree[v] = combine(tree[v * 2], tree[v * 2 + 1]);
        }
    }

    void update(int l, int r) {
        update(1, 0, n - 1, l, r);
    }

    Node query(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }

private:
    int n;
    vector<Node> tree;
    vector<bool> lazy;

    Node combine(const Node& a, const Node& b) {
        return {a.zeros + b.zeros, a.ones + b.ones, a.inv + b.inv + a.ones * b.zeros};
    }

    void push(int v, int tl, int tr) {
        if (lazy[v]) {
            int tm = (tl + tr) / 2;
            apply(v * 2, tm - tl + 1);
            apply(v * 2 + 1, tr - tm);
            lazy[v] = false;
        }
    }

    void apply(int v, int len) {
        tree[v] = {tree[v].ones, tree[v].zeros, tree[v].ones * tree[v].zeros - tree[v].inv};
        lazy[v] = !lazy[v];
    }

    void update(int v, int tl, int tr, int l, int r) {
        if (l > r) return;
        if (l == tl && r == tr) {
            apply(v, tr - tl + 1);
        } else {
            push(v, tl, tr);
            int tm = (tl + tr) / 2;
            update(v * 2, tl, tm, l, min(r, tm));
            update(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
            tree[v] = combine(tree[v * 2], tree[v * 2 + 1]);
        }
    }

    Node query(int v, int tl, int tr, int l, int r) {
        if (l > r) return {0, 0, 0};
        if (l <= tl && tr <= r) {
            return tree[v];
        }
        push(v, tl, tr);
        int tm = (tl + tr) / 2;
        Node left = query(v * 2, tl, tm, l, min(r, tm));
        Node right = query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
        return combine(left, right);
    }
};

int main() {
    int N, Q;
    cin >> N >> Q;
    vector<int> A(N);
    for (int i = 0; i < N; i++) {
        cin >> A[i];
    }

    SegmentTree seg(N);
    seg.build(A, 1, 0, N - 1);

    while (Q--) {
        int T, L, R;
        cin >> T >> L >> R;
        if (T == 1) {
            seg.update(L - 1, R - 1);
        } else {
            cout << seg.query(L - 1, R - 1).inv << endl;
        }
    }

    return 0;
}
