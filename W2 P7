#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

void balanceHeaps(priority_queue<int>& lo, priority_queue<int, vector<int>, greater<int>>& hi) {
    if (lo.size() > hi.size() + 1) {
        hi.push(lo.top());
        lo.pop();
    } else if (hi.size() > lo.size()) {
        lo.push(hi.top());
        hi.pop();
    }
}

void pruneHeap(priority_queue<int>& heap, unordered_map<int, int>& hashMap) {
    while (!heap.empty() && hashMap[heap.top()]) {
        hashMap[heap.top()]--;
        heap.pop();
    }
}

void pruneHeap(priority_queue<int, vector<int>, greater<int>>& heap, unordered_map<int, int>& hashMap) {
    while (!heap.empty() && hashMap[heap.top()]) {
        hashMap[heap.top()]--;
        heap.pop();
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> nums(n);

    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    vector<int> medians;
    unordered_map<int, int> hashMap;
    priority_queue<int> lo;  
    priority_queue<int, vector<int>, greater<int>> hi;  

    for (int i = 0; i < k; ++i) {
        lo.push(nums[i]);
    }

    for (int j = 0; j < k / 2; ++j) {
        hi.push(lo.top());
        lo.pop();
    }

    for (int i = k; i <= n; ++i) {
        medians.push_back(lo.top());

        if (i == n) break;

        int outNum = nums[i - k];
        int inNum = nums[i];
        int balance = 0;

     
        hashMap[outNum]++;
        if (outNum <= lo.top()) {
            balance--;
        } else {
            balance++;
        }

     
        if (!lo.empty() && inNum <= lo.top()) {
            lo.push(inNum);
            balance++;
        } else {
            hi.push(inNum);
            balance--;
        }


        if (balance < 0) {
            lo.push(hi.top());
            hi.pop();
            balance++;
        } else if (balance > 0) {
            hi.push(lo.top());
            lo.pop();
            balance--;
        }

        pruneHeap(lo, hashMap);
        pruneHeap(hi, hashMap);
    }

    for (int p = 0; p < medians.size(); p++) {
        cout << medians[p] << " ";
    }
    cout << endl;

    return 0;
}
