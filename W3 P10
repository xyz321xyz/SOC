#include <iostream>
#include <vector>
#include <queue>
#include <climits> 

using namespace std;

typedef pair<int, int> iPair;

class Graph {
    int V;
    vector<vector<iPair>> adj;

public:
    Graph(int V);
    void addEdge(int u, int v, int w);
    vector<int> dijkstra(int src);
};

Graph::Graph(int V) {
    this->V = V;
    adj.resize(V+1);
}

void Graph::addEdge(int u, int v, int w){
    adj[v].push_back(make_pair(u, w));
}

vector<int> Graph::dijkstra(int src){
    priority_queue<iPair, vector<iPair>, greater<iPair>> pq;
    vector<int> dist(V + 1, INT_MAX);

    pq.push(make_pair(0, src));
    dist[src] = 0;

    while(!pq.empty()){
        int u = pq.top().second;
        pq.pop();

        for (auto x : adj[u]) {
            int v = x.first;
            int weight = x.second;

            if(dist[v] > dist[u] + weight) {
                dist[v] = dist[u] + weight;
                pq.push(make_pair(dist[v], v));
            }
        }
    }

    return dist;
}


int main() {
    int N, E, T, M;
    cin >> N >> E >> T >> M;

    Graph g(N);

    for(int i = 0; i < M; ++i) {
        int a, b, t;
        cin >> a >> b >> t;
        g.addEdge(a, b, t);
    }

    vector<int> dist = g.dijkstra(E);

    int count = 0;
    for(int i = 1; i <= N; ++i) {
        if(dist[i] <= T) {
            ++count;
        }
    }

    cout << count << endl;

    return 0;
}
