#include <iostream>
#include <vector>
#include <queue>

using namespace std;

bool HomoDetector(vector<vector<int>>& graph, int n) {
    vector<int> color(n+1, -1);

    for(int start = 1; start <= n; ++start) {
        if (color[start] == -1) {
            queue<int> q;
            q.push(start);
            color[start] = 0;

            while(!q.empty()) {
                int node = q.front();
                q.pop();

                for(int neighbor : graph[node]) {
                    if(color[neighbor] == -1) {
                        color[neighbor] = 1 - color[node];
                        q.push(neighbor);
                    }
                    else if (color[node] == color[neighbor]) {
                        return false;
                    }
                }
            }
        }
    }

    return true;
}

int main() {
    int t;
    cin >> t;
    for (int scenario = 1; scenario <= t; ++scenario) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> graph(n + 1);

        for (int i = 0; i < m; ++i) {
            int a, b;
            cin >> a >> b;
            graph[a].push_back(b);
            graph[b].push_back(a);
        }

        if (HomoDetector(graph, n)) {
            cout << "Scenario #" << scenario << ":\nNo suspicious bugs found!" << endl;
        } else {
            cout << "Scenario #" << scenario << ":\nSuspicious bugs found!" << endl;
        }
    }
    return 0;
}
