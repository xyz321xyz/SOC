#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define INF 1000000000000000LL 

void floydWarshall(vector<vector<long long>>& dist) {
    int c = dist.size() - 1; 
    for (int k = 1; k <= c; ++k) {
        for (int i = 1; i <= c; ++i) {
            for (int j = 1; j <= c; ++j) {
                if (i == j) continue;
                if (dist[i][k] != INF && dist[k][j] != INF)
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
            }
        }
    }
}

int main() {
    int c, r, q;
    cin >> c >> r >> q;

    vector<vector<long long>> dist(c + 1, vector<long long>(c + 1, INF));

    for (int i = 1; i <= c; ++i) {
        dist[i][i] = 0;
    }

    for (int i = 0; i < r; ++i) {
        int a, b;
        long long s;
        cin >> a >> b >> s;
        
        dist[a][b] = min(dist[a][b], s);
        dist[b][a] = min(dist[b][a], s); 
    }

    floydWarshall(dist);

    for (int i = 0; i < q; ++i) {
        int o, p;
        cin >> o >> p;
        
        if (dist[o][p] == INF) {
            cout << -1 << endl;
        } else {
            cout << dist[o][p] << endl;
        }
    }

    return 0;
}
