#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

long long int largestRectangleArea(vector<long long int>& heights) {
    stack<int> s;
    long long int max_area = 0;
    long long int n = heights.size(); 

    for (long long int i = 0; i < n; ++i) { 
        while (!s.empty() && heights[i] < heights[s.top()]) {
            long long int height = heights[s.top()]; 
            s.pop();
            long long int width = s.empty() ? i : i - s.top() - 1; 
            max_area = max(max_area, height * width);
        }
        s.push(i);
    }

    while (!s.empty()) {
        long long int height = heights[s.top()]; 
        s.pop();
        long long int width = s.empty() ? n : n - s.top() - 1; 
        max_area = max(max_area, height * width);
    }

    return max_area;
}

int main() {
    long long int n; 
    cin >> n;
    if(n<=0) return 0;
    vector<long long int> height(n); 
    for(long long int i=0; i<n; i++) { 
        cin >> height[i];
    }
    cout << largestRectangleArea(height) << endl;
}
